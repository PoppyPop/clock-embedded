#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

: <<'ACKNOWLEDGEMENT'

The code for the kernelatleast reproduced herein is lifted from:
http://linux-tipps.blogspot.co.uk/2011/05/checking-if-at-least-kernel-version-is.html

ACKNOWLEDGEMENT

productname="pHAT DAC" # the name of the product to install
scriptname="phatdac" # the name of this script
debugmode="no" # whether the script outputs debug level messages
forcesudo="no" # whether the script requires to be ran with root privileges
promptreboot="no" # whether the script should always prompt user to reboot
customcmd="yes" # whether to execute commands specified before exit
raspbianonly="yes" # whether the script is allowed to run on other OSes
squeezesupport="no" # whether Squeeze is supported or not
wheezysupport="yes" # whether Wheezy is supported or not
jessiesupport="yes" # whether Jessie is supported or not
i2sreq="yes" # whether i2s is required or not
i2creq="no" # whether i2c interface is required or not
spireq="no" # whether spi interface is required or not
uartreq="no" # whether uart communication is required or not

FORCE=$1
DEVICE_TREE=true
ASK_TO_REBOOT=false
CURRENT_SETTING=false
INTERACTIVE=false
UPDATE_DB=false

BOOTCMD=/boot/cmdline.txt
CONFIG=/boot/config.txt
APTSRC=/etc/apt/sources.list
INITABCONF=/etc/inittab
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
LOADMOD=/etc/modules

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

sysclean() {
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysupdate() {
    sudo apt-get update
}

sysupdgrade() {
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get clean && sudo apt-get autoclean
    sudo apt-get -y autoremove &> /dev/null
}

sysreboot() {
    warning "Some changes made to your system require"
    warning "your computer to reboot to take effect."
    newline
    if confirm "Would you like to reboot now?"; then
        sync
        sudo reboot
    fi
}

arch_check() {
    IS_ARMv6=false

    if uname -m | grep "armv6l" > /dev/null; then
        IS_ARMv6=true
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

raspbian_check() {
    IS_SQUEEZE=false
    IS_WHEEZY=false
    IS_JESSIE=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "jessie" > /dev/null; then
            IS_JESSIE=true
        elif cat /etc/os-release | grep "wheezy" > /dev/null; then
            IS_WHEEZY=true
        elif cat /etc/os-release | grep "squeeze" > /dev/null; then
            IS_SQUEEZE=true
        else
            echo "Unsupported distribution"
            exit 1
        fi
    fi
}

raspbian_old() {
    if $IS_SQUEEZE || $IS_WHEEZY ;then
        true
    else
        false
    fi
}

get_init_sys() {
    if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
        SYSTEMD=1
    elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
        SYSTEMD=0
    else
        echo "Unrecognised init system" && exit 1
    fi
}

: <<'MAINSTART'

Perform all global variables declarations as well as function definition
above this section for clarity, thanks!

MAINSTART

arch_check
os_check

if $IS_RASPBIAN; then
    raspbian_check
    if [ $squeezesupport == "no" ] && $IS_SQUEEZE; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/pimoroni/$gitreponame"
        echo "for additional information and support"
        newline
        exit 1
    fi
    if [ $wheezysupport == "no" ] && $IS_WHEEZY; then
        newline
        warning "--- Warning ---"
        newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/pimoroni/$gitreponame"
        echo "for additional information and support"
        newline
        exit 1
    fi
elif ! $IS_RASPBIAN && [ $raspbianonly == "yes" ]; then
    warning "Warning!"
    echo "Please only run this script on Raspbian on your Raspberry Pi"
    exit 1
else
    if [ $debugmode == "yes" ]; then
        newline
        echo "IS_RASPBIAN is $IS_RASPBIAN"
        echo "IS_MACOSX is $IS_MACOSX"
        echo "IS_X86_64 is $IS_X86_64"
        echo "IS_X86_32 is $IS_X86_32"
    fi
fi

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

newline
echo "This script will install everything needed to use"
echo "$productname"
newline
warning "--- Warning ---"
newline
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
newline
echo "If you want to see what this script does before"
echo "running it, you should run:"
echo "    \curl -sS get.pimoroni.com/$scriptname"
newline

if confirm "Do you wish to continue?"; then

    newline
    echo "Checking hardware requirements..."

    if [ $spireq == "yes" ]; then
        newline
        if confirm "Hardware requires SPI, enable now?"; then
            \curl -sS get.pimoroni.com/spi | bash -s - "-y"
        fi
    fi

    if [ $i2creq == "yes" ]; then
        newline
        if confirm "Hardware requires I2C, enable now?"; then
            \curl -sS get.pimoroni.com/i2c | bash -s - "-y"
        fi
    fi

    if [ $i2sreq == "yes" ]; then
        if [ -e $CONFIG ] && grep -q "^device_tree=$" $CONFIG; then
            DEVICE_TREE=false
        fi

        if $DEVICE_TREE; then

            newline
            echo "Adding Device Tree Entry to $CONFIG"

            if [ -e $CONFIG ] && grep -q "^dtoverlay=hifiberry-dac$" $CONFIG; then
                echo "dtoverlay already active"
            else
                echo "dtoverlay=hifiberry-dac" | sudo tee -a $CONFIG
                ASK_TO_REBOOT=true
            fi

            if [ -e $BLACKLIST ]; then
                newline
                echo "Commenting out Blacklist entry in "
                echo "$BLACKLIST"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*i2c-bcm2708.*/#blacklist i2c-bcm2708/"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*snd-soc-pcm512x.*/#blacklist snd-soc-pcm512x/"
                sudo sed -i $BLACKLIST -e "s/^blacklist[[:space:]]*snd-soc-wm8804.*/#blacklist snd-soc-wm8804/"
            fi
        else
            newline
            echo "No Device Tree Detected, not supported"
            newline
            exit 1
        fi

        if [ -e $CONFIG ] && grep -q -E "^dtparam=audio=on$" $CONFIG; then
            bcm2835off="no"
            newline
            echo "Disabling default sound driver"
            sudo sed -i $CONFIG -e "s/^dtparam=audio=on$/#dtparam=audio=on/"
            if [ -e $LOADMOD ] && grep -q "^snd-bcm2835" $LOADMOD; then
                sudo sed -i $LOADMOD -e "s/^snd-bcm2835/#snd-bcm2835/"
            fi
            ASK_TO_REBOOT=true
        elif [ -e $LOADMOD ] && grep -q "^snd-bcm2835" $LOADMOD; then
            bcm2835off="no"
            newline
            echo "Disabling default sound module"
            sudo sed -i $LOADMOD -e "s/^snd-bcm2835/#snd-bcm2835/"
            ASK_TO_REBOOT=true
        else
            newline
            echo "Default sound driver currently not loaded"
            bcm2835off="yes"
        fi
    fi

    echo "Configuring sound output"
    if [ -e /etc/asound.conf ]; then
        if [ -e /etc/asound.conf.old ]; then
            sudo rm -f /etc/asound.conf.old
        fi
        sudo mv /etc/asound.conf /etc/asound.conf.old
    fi
    sudo echo -e "pcm.\041default {\n type hw\n card 0\n}" > ~/asound.conf
    sudo echo -e "ctl.\041default {\n type hw\n card 0\n}" >> ~/asound.conf
    sudo mv ~/asound.conf /etc/asound.conf

    if [ $bcm2835off == "yes" ]; then
        newline
        echo "We can now test your $productname"
        warning "Set your speakers at a low volume!"
        if confirm "Do you wish to test your system now?"; then
            echo "Testing..."
            speaker-test -c2 -t wav
        fi
    fi
    newline
    success "All done!"
    newline
    echo "Enjoy your new $productname!"
    newline

    if [ $promptreboot == "yes" ] || $ASK_TO_REBOOT; then
        sysreboot
    fi
else
    newline
    echo "Aborting..."
    newline
fi

exit 0
